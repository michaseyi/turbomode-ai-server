// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

model User {
  id              String        @id @default(cuid())
  firstName       String
  role            Role
  lastName        String
  email           String        @unique
  profileImage    String?
  password        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  googleId        String?
  isEmailVerified Boolean       @default(false)
  integrations    Integration[]
  actions Action[]
}

model Integration {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  type         IntegrationType
  enabled      Boolean         @default(true)
  gmail GmailIntegration?
  gCalendar GoogleCalendarIntegration?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}


enum EmailProcessOption {
  All
  FromSpecific
  ExceptSpecific
}

model GmailIntegration {
  id   String @id @default(cuid())
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String @unique
  email String @unique
  accessToken String
  refreshToken String
  instruction String

  emailProcessOption EmailProcessOption @default(All)
  specificAddresses String? // used in conjuction with emailProcssingOption
  messages GmailMessage[]

  processAttachment Boolean @default(false)
  processThreadHistory Boolean @default(false)
}

model GoogleCalendarIntegration{
  id   String @id @default(cuid())
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId String @unique
  events CalendarEvent[]
  email String @unique
  accessToken String
  refreshToken String

}

enum IntegrationType {
  Gmail
  Slack
  Zoom
  Gcalendar
}


enum ActionTrigger {
  User
  Assistant
  DataSource
}


model Action {
  id String @id @default(cuid())
  trigger ActionTrigger
  active Boolean
  title String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ActionMessage[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ActionMessageSource {
  User
  Assistant
}

model ActionMessage {
  id String @id @default(cuid())
  source ActionMessageSource
  content String
  nextId String
  actionId String
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id          String   @id @default(cuid()) 
  eventId     String   @unique              
  calendarId  String   @default("primary")  
  gCalendarIntegrationId String
  gCalendarIntegration GoogleCalendarIntegration @relation(fields: [gCalendarIntegrationId], references: [id], onDelete: Cascade)
  summary     String?                       
  description String?                       
  location    String?                       
  startTime   DateTime                    
  endTime     DateTime                    
  createdAt   DateTime   @default(now())  
  updatedAt   DateTime   @updatedAt       
  status      String?                     
  htmlLink    String?                     

  @@index([eventId])
}


model GmailMessage {
  id            String   @id @default(cuid())     
  messageId     String   @unique                   
  threadId      String?                            
  labelIds      String[]   @default([])            
  snippet       String?                            
  internalDate  DateTime                           
  from          String?                            
  to            String[]   @default([])            
  cc            String[]   @default([])            
  bcc           String[]   @default([])            
  subject       String?                            
  body          String?                            
  isUnread      Boolean   @default(true)           
  gmailIntegrationId String 
  gmailIntegration GmailIntegration @relation(fields: [gmailIntegrationId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())         
  updatedAt     DateTime   @updatedAt              

  @@index([messageId])
  @@index([threadId])
}


